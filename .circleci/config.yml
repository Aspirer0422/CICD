version: 2.1

orbs: 
  node: 'circleci/node@4.7.0'
  slack: circleci/slack@4.1
  

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      
      workflow_id:
        description: unique identifier
        type: string      
    
    steps:
      
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
         type: string   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
            cd ~/project/backend
              npm install
              npm run migrations:revert
              exit 1
            fi
  
  
          context: slack-secrets


jobs:

  notify_slack_error:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          event: always
          mentions: '@Ram'
          template: basic_fail_1

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      
      - slack/notify:
          event: always
          mentions: '@Ram'
          template: basic_fail_1    

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            echo $CIRCLE_WORKING_DIRECTORY
            cd backend
            npm install
            npm run build            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      
      - slack/notify:
          event: always
          mentions: '@Ram'
          template: basic_fail_1
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Front End
          command: |
            cd frontend
            npm install
            npm run test  
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Backend
          command: |
            cd backend
            npm install
            npm run test  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Front End
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back End
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run: yum install -y tar gzip              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
               --filters Name=tag:project,Values=udapeople \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --region "us-east-1" --output text >> .circleci/ansible/inventory.txt
               
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - run:
          command: echo
      - destroy-environment:
           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
            fingerprints: ["58:45:86:30:67:18:96:3b:8e:1e:f3:c7:4d:7a:00:6e"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            
            
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            
      # Here's where you will add some code to rollback on failure               

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations:revert
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            
          no_output_timeout: 10m    
            
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "${CIRCLE_WORKFLOW_ID:0:7}" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
     
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"     
      - revert-migrations:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"         

  deploy-frontend:
    docker:
      - image:  circleci/node:13.8.0
    steps:
      - checkout
      
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Install awscli
          command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
      - run:
          name: verify awscli
          command: aws --version
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:project,Values=udapeople  --query 'Reservations[*].Instances[*].PublicIpAddress'  --region "us-east-1" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"     
      - revert-migrations:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"   
  
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
            fingerprints: ["58:45:86:30:67:18:96:3b:8e:1e:f3:c7:4d:7a:00:6e"] 
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: install tar
          command: apk add --update tar gzip
      
      - run:
          name: install curl
          command: apk add --update curl

      - run:
            name: Install Ansible
            command: |
              # Install Ansible
              apk add --update ansible            
      - run:
          name: Install node 
          command: |
            apk add --update nodejs           
      - run:
          name: Install npm
          command: |
            apk add --update npm
      - run:
          name: Install aws cli
          command: |
            pip install awscli   

      - run:
          name: Build backend app
          command: |
            cd backend
            npm i
            npm run build
            cd ..   
            tar -C backend -czvf artifact.tar.gz .
            pwd
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            
      
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"     
      - revert-migrations:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"   
   
            

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: install curl
          command: apk add --update curl

      - run:
            name: Install Ansible
            command: |
              # Install Ansible
              apk add --update ansible            
      - run:
          name: Install node 
          command: |
            apk add --update nodejs           
      - run:
          name: Install npm
          command: |
            apk add --update npm
      - run:
          name: Install aws cli
          command: |
            pip install awscli   

      - run:
          name: Get Backend url
          command: |
              export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:project,Values=udapeople  --query 'Reservations[*].Instances[*].PublicIpAddress'  --region "us-east-1" --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:project,Values=udapeople  --query 'Reservations[*].Instances[*].PublicIpAddress'  --region "us-east-1" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          working_directory: ./backend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"     
      - revert-migrations:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"   

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout    
      - run:
          name: Install tar gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            OLD_WORKFLOWID=$(aws cloudformation \
              list-exports --region "us-east-1" --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "${OLD_WORKFLOWID}"  
            curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "$OLD_WORKFLOWID" https://api.memstash.io/values/workflowid
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout  
      - run:
          name: Remove old stacks and files
          command: |
            OLD_WORKFLOWID=$(curl -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/workflowid)
            export OLD_WORKFLOW_ID="udapeople-$OLD_WORKFLOWID"
            echo Old Workflow Id: "${OLD_WORKFLOW_ID}"
            CurrentWorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
            echo "current workflow ${CurrentWorkflowID}"
            echo Old Workflow Id unq: "${OLD_WORKFLOWID}"
            if [[ "${CurrentWorkflowID}" != "${OLD_WORKFLOW_ID}" ]]
            then
              aws s3 rm s3://${OLD_WORKFLOW_ID}/ --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOWID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOWID}"
            fi                    

   
   
  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [ test-frontend, test-backend,scan-backend,scan-frontend]
      - configure-infrastructure:
          requires: [deploy-infrastructure] 
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend] 
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]  
      - notify_slack_error:
          requires: [cleanup]
           
          
         